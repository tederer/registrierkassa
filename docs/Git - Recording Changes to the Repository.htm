<!DOCTYPE html>
<html class=" js fontface no-webkit no-chrome windows no-ie8" lang="en"><head>
<meta http-equiv="content-type" content="text/html; charset=UTF-8">

  <meta charset="utf-8">
  <meta content="IE=edge,chrome=1" http-equiv="X-UA-Compatible">
<script src="Git%20-%20Recording%20Changes%20to%20the%20Repository-Dateien/20c4a8c482" type="text/javascript"></script><script src="Git%20-%20Recording%20Changes%20to%20the%20Repository-Dateien/nr-984.js"></script><script type="text/javascript">window.NREUM||(NREUM={});NREUM.info={"beacon":"bam.nr-data.net","errorBeacon":"bam.nr-data.net","licenseKey":"20c4a8c482","applicationID":"454369","transactionName":"dl5cQkcLXF9XRBoHW1paQRlGAVNHW1lb","queueTime":1,"applicationTime":149,"ttGuid":"","agentToken":null,"agent":""}</script>
<script type="text/javascript">window.NREUM||(NREUM={}),__nr_require=function(e,t,n){function r(n){if(!t[n]){var o=t[n]={exports:{}};e[n][0].call(o.exports,function(t){var o=e[n][1][t];return r(o||t)},o,o.exports)}return t[n].exports}if("function"==typeof __nr_require)return __nr_require;for(var o=0;o<n.length;o++)r(n[o]);return r}({1:[function(e,t,n){function r(){}function o(e,t,n){return function(){return i(e,[(new Date).getTime()].concat(u(arguments)),t?null:this,n),t?void 0:this}}var i=e("handle"),a=e(2),u=e(3),c=e("ee").get("tracer"),f=NREUM;"undefined"==typeof window.newrelic&&(newrelic=f);var s=["setPageViewName","setCustomAttribute","setErrorHandler","finished","addToTrace","inlineHit"],l="api-",p=l+"ixn-";a(s,function(e,t){f[t]=o(l+t,!0,"api")}),f.addPageAction=o(l+"addPageAction",!0),f.setCurrentRouteName=o(l+"routeName",!0),t.exports=newrelic,f.interaction=function(){return(new r).get()};var d=r.prototype={createTracer:function(e,t){var n={},r=this,o="function"==typeof t;return i(p+"tracer",[Date.now(),e,n],r),function(){if(c.emit((o?"":"no-")+"fn-start",[Date.now(),r,o],n),o)try{return t.apply(this,arguments)}finally{c.emit("fn-end",[Date.now()],n)}}}};a("setName,setAttribute,save,ignore,onEnd,getContext,end,get".split(","),function(e,t){d[t]=o(p+t)}),newrelic.noticeError=function(e){"string"==typeof e&&(e=new Error(e)),i("err",[e,(new Date).getTime()])}},{}],2:[function(e,t,n){function r(e,t){var n=[],r="",i=0;for(r in e)o.call(e,r)&&(n[i]=t(r,e[r]),i+=1);return n}var o=Object.prototype.hasOwnProperty;t.exports=r},{}],3:[function(e,t,n){function r(e,t,n){t||(t=0),"undefined"==typeof n&&(n=e?e.length:0);for(var r=-1,o=n-t||0,i=Array(o<0?0:o);++r<o;)i[r]=e[t+r];return i}t.exports=r},{}],ee:[function(e,t,n){function r(){}function o(e){function t(e){return e&&e instanceof r?e:e?u(e,a,i):i()}function n(n,r,o){e&&e(n,r,o);for(var i=t(o),a=p(n),u=a.length,c=0;c<u;c++)a[c].apply(i,r);var s=f[m[n]];return s&&s.push([w,n,r,i]),i}function l(e,t){g[e]=p(e).concat(t)}function p(e){return g[e]||[]}function d(e){return s[e]=s[e]||o(n)}function v(e,t){c(e,function(e,n){t=t||"feature",m[n]=t,t in f||(f[t]=[])})}var g={},m={},w={on:l,emit:n,get:d,listeners:p,context:t,buffer:v};return w}function i(){return new r}var a="nr@context",u=e("gos"),c=e(2),f={},s={},l=t.exports=o();l.backlog=f},{}],gos:[function(e,t,n){function r(e,t,n){if(o.call(e,t))return e[t];var r=n();if(Object.defineProperty&&Object.keys)try{return Object.defineProperty(e,t,{value:r,writable:!0,enumerable:!1}),r}catch(i){}return e[t]=r,r}var o=Object.prototype.hasOwnProperty;t.exports=r},{}],handle:[function(e,t,n){function r(e,t,n,r){o.buffer([e],r),o.emit(e,t,n)}var o=e("ee").get("handle");t.exports=r,r.ee=o},{}],id:[function(e,t,n){function r(e){var t=typeof e;return!e||"object"!==t&&"function"!==t?-1:e===window?0:a(e,i,function(){return o++})}var o=1,i="nr@id",a=e("gos");t.exports=r},{}],loader:[function(e,t,n){function r(){if(!h++){var e=y.info=NREUM.info,t=s.getElementsByTagName("script")[0];if(e&&e.licenseKey&&e.applicationID&&t){c(m,function(t,n){e[t]||(e[t]=n)}),u("mark",["onload",a()],null,"api");var n=s.createElement("script");n.src="https://"+e.agent,t.parentNode.insertBefore(n,t)}}}function o(){"complete"===s.readyState&&i()}function i(){u("mark",["domContent",a()],null,"api")}function a(){return(new Date).getTime()}var u=e("handle"),c=e(2),f=window,s=f.document,l="addEventListener",p="attachEvent",d=f.XMLHttpRequest,v=d&&d.prototype;NREUM.o={ST:setTimeout,CT:clearTimeout,XHR:d,REQ:f.Request,EV:f.Event,PR:f.Promise,MO:f.MutationObserver},e(1);var g=""+location,m={beacon:"bam.nr-data.net",errorBeacon:"bam.nr-data.net",agent:"js-agent.newrelic.com/nr-984.min.js"},w=d&&v&&v[l]&&!/CriOS/.test(navigator.userAgent),y=t.exports={offset:a(),origin:g,features:{},xhrWrappable:w};s[l]?(s[l]("DOMContentLoaded",i,!1),f[l]("load",r,!1)):(s[p]("onreadystatechange",o),f[p]("onload",r)),u("mark",["firstbyte",a()],null,"api");var h=0},{}]},{},["loader"]);</script>

  <title>Git - Recording Changes to the Repository</title>

  <link href="https://git-scm.com/favicon.ico" rel="shortcut icon" type="image/x-icon">
  <link rel="alternate" href="https://git-scm.com/blog.rss" type="application/rss+xml" title="Git - Blog">

  <link rel="stylesheet" media="screen" href="Git%20-%20Recording%20Changes%20to%20the%20Repository-Dateien/git-scm-65ca8280a031499ee9e8e2b10c8a596c.css">
  <script src="Git%20-%20Recording%20Changes%20to%20the%20Repository-Dateien/modernizr-10d8d48497292341fc1c4a63d06c6f61.js"></script>
<script src="Git%20-%20Recording%20Changes%20to%20the%20Repository-Dateien/modernizr-tests-0e26a9afd9c6455a99b7b4165485c366.js"></script>
  <!--[if (gte IE 6)&(lte IE 8)]>
  <script src="/javascripts/selectivizr-min.js"></script>
  <![endif]-->

  <script src="Git%20-%20Recording%20Changes%20to%20the%20Repository-Dateien/jsq2fql.txt" type="text/javascript"></script>
  <script>
    //<![CDATA[
      try{Typekit.load();}catch(e){}
    //]]>
  </script>

</head>

<body id="documentation">

  <div id="banner">
    <div class="inner">
      <h3>The 2016 Git User's Survey is now up! <em>12 September — 20 October 2016.</em></h3>

      <p>Please devote a few moments of your time to
      <a href="https://survs.com/survey/0janvqmmyg">fill out the simple questionnaire</a>.
      It will help the Git community understand your needs, what you like
      about Git (and what you don't), and help us improve it in general.
      The results will be published at the
      <a href="http://git.wiki.kernel.org/index.php/GitSurvey2016">GitSurvey2016</a>
      wiki page.
    </p></div>
  </div>

  <div class="inner">
    <header>

  <a href="https://git-scm.com/"><img src="Git%20-%20Recording%20Changes%20to%20the%20Repository-Dateien/logo2x.png" alt="Git" height="46" width="110"></a>
  <span id="tagline">
    <em>--</em>fast-version-control
  </span>

  <form id="search" action="/search/results">
    <input id="search-text" name="search" placeholder="Search entire site..." autocomplete="off" type="text">
  </form>
  <div id="search-results"></div>

</header>

  </div> <!-- .inner -->

    <div class="inner">
      <div id="content-wrapper">
        <aside class="sidebar">
  <nav>
    <ul>
      <li>
        <a href="https://git-scm.com/about">About</a>
      </li>
      <li>
        <a class="active" href="https://git-scm.com/doc">Documentation</a>
        <ul class="expanded">
          <li>
            <a href="https://git-scm.com/docs">Reference</a>
          </li>
          <li>
            <a href="https://git-scm.com/book">Book</a>
          </li>
          <li>
            <a href="https://git-scm.com/videos">Videos</a>
          </li>
          <li>
            <a href="https://git-scm.com/doc/ext">External Links</a>
          </li>
        </ul>
      </li>
      <li>
        <a href="https://git-scm.com/blog">Blog</a>
      </li>
      <li>
        <a href="https://git-scm.com/downloads">Downloads</a>
        <ul class="">
          <li>
            <a href="https://git-scm.com/downloads/guis">GUI Clients</a>
          </li>
          <li>
            <a href="https://git-scm.com/downloads/logos">Logos</a>
          </li>
        </ul>
      </li>
      <li>
        <a href="https://git-scm.com/community">Community</a>
      </li>
    </ul>
      <hr class="sidebar">
        <p>Download this book in <a href="https://progit2.s3.amazonaws.com/en/2016-03-22-f3531/progit-en.1084.pdf">PDF</a>,
   <a href="https://progit2.s3.amazonaws.com/en/2016-03-22-f3531/progit-en.1084.mobi" type="application/x-mobipocket-ebook">mobi</a>,
or <a href="https://progit2.s3.amazonaws.com/en/2016-03-22-f3531/progit-en.1084.epub" type="application/epub+zip">ePub</a> form for free.</p>

  <p>
This book is translated into
  <a href="https://git-scm.com/book/de">Deutsch</a>,
  <a href="https://git-scm.com/book/zh">简体中文</a>,
  <a href="https://git-scm.com/book/zh-tw">正體中文</a>,
  <a href="https://git-scm.com/book/fr/v2">Français</a>,
  <a href="https://git-scm.com/book/ja">日本語</a>,
  <a href="https://git-scm.com/book/nl">Nederlands</a>,
  <a href="https://git-scm.com/book/ru">Русский</a>,
  <a href="https://git-scm.com/book/ko">한국어</a>,
  <a href="https://git-scm.com/book/pt-br">Português (Brasil)</a> and
  <a href="https://git-scm.com/book/cs">Čeština</a>.
</p>
<p>
Partial translations available in
  <a href="https://git-scm.com/book/ar">Arabic</a>,
  <a href="https://git-scm.com/book/es">Español</a>,
  <a href="https://git-scm.com/book/id">Indonesian</a>,
  <a href="https://git-scm.com/book/it">Italiano</a>,
  <a href="https://git-scm.com/book/fi">Suomi</a>,
  <a href="https://git-scm.com/book/mk">Македонски</a>,
  <a href="https://git-scm.com/book/pl">Polski</a> and
  <a href="https://git-scm.com/book/tr">Türkçe</a>.
</p>
<p>
Translations started for
  <a href="https://git-scm.com/book/az">Azərbaycan dili</a>,
  <a href="https://git-scm.com/book/be">Беларуская</a>,
  <a href="https://git-scm.com/book/ca">Català</a>,
  <a href="https://git-scm.com/book/eo">Esperanto</a>,
  <a href="https://git-scm.com/book/es-ni">Español (Nicaragua)</a>,
  <a href="https://git-scm.com/book/fa" dir="rtl">فارسی</a>,
  <a href="https://git-scm.com/book/hi">हिन्दी</a>,
  <a href="https://git-scm.com/book/hu">Magyar</a>,
  <a href="https://git-scm.com/book/no-nb">Norwegian Bokmål</a>,
  <a href="https://git-scm.com/book/ro">Română</a>,
  <a href="https://git-scm.com/book/sr">Српски</a>,
  <a href="https://git-scm.com/book/th">ภาษาไทย</a>,
  <a href="https://git-scm.com/book/vi">Tiếng Việt</a>,
  <a href="https://git-scm.com/book/uk">Українська</a> and
  <a href="https://git-scm.com/book/uz/v2">Ўзбекча</a>.
</p>
<hr class="sidebar">
<p>
The source of this book is <a href="https://github.com/progit/progit2">hosted on GitHub.</a><br>
Patches, suggestions and comments are welcome.
</p>

    <h4>Related Material</h4>
  <ul class="related-material">
      <li class="reference">
      <strong><a href="https://git-scm.com/ref/git-add">git-add</a></strong>
        in <a href="https://git-scm.com/docs">Reference</a>
      </li>
      <li class="reference">
      <strong><a href="https://git-scm.com/ref/git-status">git-status</a></strong>
        in <a href="https://git-scm.com/docs">Reference</a>
      </li>
      <li class="reference">
      <strong><a href="https://git-scm.com/ref/git-diff">git-diff</a></strong>
        in <a href="https://git-scm.com/docs">Reference</a>
      </li>
      <li class="reference">
      <strong><a href="https://git-scm.com/ref/git-reset">git-reset</a></strong>
        in <a href="https://git-scm.com/docs">Reference</a>
      </li>
      <li class="reference">
      <strong><a href="https://git-scm.com/ref/git-rm">git-rm</a></strong>
        in <a href="https://git-scm.com/docs">Reference</a>
      </li>
      <li class="reference">
      <strong><a href="https://git-scm.com/ref/git-commit">git-commit</a></strong>
        in <a href="https://git-scm.com/docs">Reference</a>
      </li>
      <li class="reference">
      <strong><a href="https://git-scm.com/ref/git-mv">git-mv</a></strong>
        in <a href="https://git-scm.com/docs">Reference</a>
      </li>
      <li class="reference">
      <strong><a href="https://git-scm.com/ref/git-config">git-config</a></strong>
        in <a href="https://git-scm.com/docs">Reference</a>
      </li>
  </ul>


  </nav>
</aside>
        <div id="content">
          

<div id="book-chapters">
  <a class="dropdown-trigger" id="book-chapters-trigger" data-panel-id="chapters-dropdown" href="#">Chapters ▾</a>
<div class="dropdown-panel" id="chapters-dropdown">
  <div class="three-column">
    <div class="column-left">
      <ol class="book-toc">
  <li class="chapter">
  <h2>1. <a href="https://git-scm.com/book/en/v2/Getting-Started-About-Version-Control">Getting Started</a></h2>
    <ol>
          <li>
            1.1
            <a href="https://git-scm.com/book/en/v2/Getting-Started-About-Version-Control">About Version Control</a>
          </li>
          <li>
            1.2
            <a href="https://git-scm.com/book/en/v2/Getting-Started-A-Short-History-of-Git">A Short History of Git</a>
          </li>
          <li>
            1.3
            <a href="https://git-scm.com/book/en/v2/Getting-Started-Git-Basics">Git Basics</a>
          </li>
          <li>
            1.4
            <a href="https://git-scm.com/book/en/v2/Getting-Started-The-Command-Line">The Command Line</a>
          </li>
          <li>
            1.5
            <a href="https://git-scm.com/book/en/v2/Getting-Started-Installing-Git">Installing Git</a>
          </li>
          <li>
            1.6
            <a href="https://git-scm.com/book/en/v2/Getting-Started-First-Time-Git-Setup">First-Time Git Setup</a>
          </li>
          <li>
            1.7
            <a href="https://git-scm.com/book/en/v2/Getting-Started-Getting-Help">Getting Help</a>
          </li>
          <li>
            1.8
            <a href="https://git-scm.com/book/en/v2/Getting-Started-Summary">Summary</a>
          </li>
    </ol>
  </li>
  <li class="chapter">
  <h2>2. <a href="https://git-scm.com/book/en/v2/Git-Basics-Getting-a-Git-Repository">Git Basics</a></h2>
    <ol>
          <li>
            2.1
            <a href="https://git-scm.com/book/en/v2/Git-Basics-Getting-a-Git-Repository">Getting a Git Repository</a>
          </li>
          <li>
            2.2
            <a href="https://git-scm.com/book/en/v2/Git-Basics-Recording-Changes-to-the-Repository">Recording Changes to the Repository</a>
          </li>
          <li>
            2.3
            <a href="https://git-scm.com/book/en/v2/Git-Basics-Viewing-the-Commit-History">Viewing the Commit History</a>
          </li>
          <li>
            2.4
            <a href="https://git-scm.com/book/en/v2/Git-Basics-Undoing-Things">Undoing Things</a>
          </li>
          <li>
            2.5
            <a href="https://git-scm.com/book/en/v2/Git-Basics-Working-with-Remotes">Working with Remotes</a>
          </li>
          <li>
            2.6
            <a href="https://git-scm.com/book/en/v2/Git-Basics-Tagging">Tagging</a>
          </li>
          <li>
            2.7
            <a href="https://git-scm.com/book/en/v2/Git-Basics-Git-Aliases">Git Aliases</a>
          </li>
          <li>
            2.8
            <a href="https://git-scm.com/book/en/v2/Git-Basics-Summary">Summary</a>
          </li>
    </ol>
  </li>
  <li class="chapter">
  <h2>3. <a href="https://git-scm.com/book/en/v2/Git-Branching-Branches-in-a-Nutshell">Git Branching</a></h2>
    <ol>
          <li>
            3.1
            <a href="https://git-scm.com/book/en/v2/Git-Branching-Branches-in-a-Nutshell">Branches in a Nutshell</a>
          </li>
          <li>
            3.2
            <a href="https://git-scm.com/book/en/v2/Git-Branching-Basic-Branching-and-Merging">Basic Branching and Merging</a>
          </li>
          <li>
            3.3
            <a href="https://git-scm.com/book/en/v2/Git-Branching-Branch-Management">Branch Management</a>
          </li>
          <li>
            3.4
            <a href="https://git-scm.com/book/en/v2/Git-Branching-Branching-Workflows">Branching Workflows</a>
          </li>
          <li>
            3.5
            <a href="https://git-scm.com/book/en/v2/Git-Branching-Remote-Branches">Remote Branches</a>
          </li>
          <li>
            3.6
            <a href="https://git-scm.com/book/en/v2/Git-Branching-Rebasing">Rebasing</a>
          </li>
          <li>
            3.7
            <a href="https://git-scm.com/book/en/v2/Git-Branching-Summary">Summary</a>
          </li>
    </ol>
  </li>
  <li class="chapter">
  <h2>4. <a href="https://git-scm.com/book/en/v2/Git-on-the-Server-The-Protocols">Git on the Server</a></h2>
    <ol>
          <li>
            4.1
            <a href="https://git-scm.com/book/en/v2/Git-on-the-Server-The-Protocols">The Protocols</a>
          </li>
          <li>
            4.2
            <a href="https://git-scm.com/book/en/v2/Git-on-the-Server-Getting-Git-on-a-Server">Getting Git on a Server</a>
          </li>
          <li>
            4.3
            <a href="https://git-scm.com/book/en/v2/Git-on-the-Server-Generating-Your-SSH-Public-Key">Generating Your SSH Public Key</a>
          </li>
          <li>
            4.4
            <a href="https://git-scm.com/book/en/v2/Git-on-the-Server-Setting-Up-the-Server">Setting Up the Server</a>
          </li>
          <li>
            4.5
            <a href="https://git-scm.com/book/en/v2/Git-on-the-Server-Git-Daemon">Git Daemon</a>
          </li>
          <li>
            4.6
            <a href="https://git-scm.com/book/en/v2/Git-on-the-Server-Smart-HTTP">Smart HTTP</a>
          </li>
          <li>
            4.7
            <a href="https://git-scm.com/book/en/v2/Git-on-the-Server-GitWeb">GitWeb</a>
          </li>
          <li>
            4.8
            <a href="https://git-scm.com/book/en/v2/Git-on-the-Server-GitLab">GitLab</a>
          </li>
          <li>
            4.9
            <a href="https://git-scm.com/book/en/v2/Git-on-the-Server-Third-Party-Hosted-Options">Third Party Hosted Options</a>
          </li>
          <li>
            4.10
            <a href="https://git-scm.com/book/en/v2/Git-on-the-Server-Summary">Summary</a>
          </li>
    </ol>
  </li>
  <li class="chapter">
  <h2>5. <a href="https://git-scm.com/book/en/v2/Distributed-Git-Distributed-Workflows">Distributed Git</a></h2>
    <ol>
          <li>
            5.1
            <a href="https://git-scm.com/book/en/v2/Distributed-Git-Distributed-Workflows">Distributed Workflows</a>
          </li>
          <li>
            5.2
            <a href="https://git-scm.com/book/en/v2/Distributed-Git-Contributing-to-a-Project">Contributing to a Project</a>
          </li>
          <li>
            5.3
            <a href="https://git-scm.com/book/en/v2/Distributed-Git-Maintaining-a-Project">Maintaining a Project</a>
          </li>
          <li>
            5.4
            <a href="https://git-scm.com/book/en/v2/Distributed-Git-Summary">Summary</a>
          </li>
    </ol>
  </li>
</ol>

    </div>
    <div class="column-middle">
      <ol class="book-toc">
  <li class="chapter">
  <h2>6. <a href="https://git-scm.com/book/en/v2/GitHub-Account-Setup-and-Configuration">GitHub</a></h2>
    <ol>
          <li>
            6.1
            <a href="https://git-scm.com/book/en/v2/GitHub-Account-Setup-and-Configuration">Account Setup and Configuration</a>
          </li>
          <li>
            6.2
            <a href="https://git-scm.com/book/en/v2/GitHub-Contributing-to-a-Project">Contributing to a Project</a>
          </li>
          <li>
            6.3
            <a href="https://git-scm.com/book/en/v2/GitHub-Maintaining-a-Project">Maintaining a Project</a>
          </li>
          <li>
            6.4
            <a href="https://git-scm.com/book/en/v2/GitHub-Managing-an-organization">Managing an organization</a>
          </li>
          <li>
            6.5
            <a href="https://git-scm.com/book/en/v2/GitHub-Scripting-GitHub">Scripting GitHub</a>
          </li>
          <li>
            6.6
            <a href="https://git-scm.com/book/en/v2/GitHub-Summary">Summary</a>
          </li>
    </ol>
  </li>
  <li class="chapter">
  <h2>7. <a href="https://git-scm.com/book/en/v2/Git-Tools-Revision-Selection">Git Tools</a></h2>
    <ol>
          <li>
            7.1
            <a href="https://git-scm.com/book/en/v2/Git-Tools-Revision-Selection">Revision Selection</a>
          </li>
          <li>
            7.2
            <a href="https://git-scm.com/book/en/v2/Git-Tools-Interactive-Staging">Interactive Staging</a>
          </li>
          <li>
            7.3
            <a href="https://git-scm.com/book/en/v2/Git-Tools-Stashing-and-Cleaning">Stashing and Cleaning</a>
          </li>
          <li>
            7.4
            <a href="https://git-scm.com/book/en/v2/Git-Tools-Signing-Your-Work">Signing Your Work</a>
          </li>
          <li>
            7.5
            <a href="https://git-scm.com/book/en/v2/Git-Tools-Searching">Searching</a>
          </li>
          <li>
            7.6
            <a href="https://git-scm.com/book/en/v2/Git-Tools-Rewriting-History">Rewriting History</a>
          </li>
          <li>
            7.7
            <a href="https://git-scm.com/book/en/v2/Git-Tools-Reset-Demystified">Reset Demystified</a>
          </li>
          <li>
            7.8
            <a href="https://git-scm.com/book/en/v2/Git-Tools-Advanced-Merging">Advanced Merging</a>
          </li>
          <li>
            7.9
            <a href="https://git-scm.com/book/en/v2/Git-Tools-Rerere">Rerere</a>
          </li>
          <li>
            7.10
            <a href="https://git-scm.com/book/en/v2/Git-Tools-Debugging-with-Git">Debugging with Git</a>
          </li>
          <li>
            7.11
            <a href="https://git-scm.com/book/en/v2/Git-Tools-Submodules">Submodules</a>
          </li>
          <li>
            7.12
            <a href="https://git-scm.com/book/en/v2/Git-Tools-Bundling">Bundling</a>
          </li>
          <li>
            7.13
            <a href="https://git-scm.com/book/en/v2/Git-Tools-Replace">Replace</a>
          </li>
          <li>
            7.14
            <a href="https://git-scm.com/book/en/v2/Git-Tools-Credential-Storage">Credential Storage</a>
          </li>
          <li>
            7.15
            <a href="https://git-scm.com/book/en/v2/Git-Tools-Summary">Summary</a>
          </li>
    </ol>
  </li>
  <li class="chapter">
  <h2>8. <a href="https://git-scm.com/book/en/v2/Customizing-Git-Git-Configuration">Customizing Git</a></h2>
    <ol>
          <li>
            8.1
            <a href="https://git-scm.com/book/en/v2/Customizing-Git-Git-Configuration">Git Configuration</a>
          </li>
          <li>
            8.2
            <a href="https://git-scm.com/book/en/v2/Customizing-Git-Git-Attributes">Git Attributes</a>
          </li>
          <li>
            8.3
            <a href="https://git-scm.com/book/en/v2/Customizing-Git-Git-Hooks">Git Hooks</a>
          </li>
          <li>
            8.4
            <a href="https://git-scm.com/book/en/v2/Customizing-Git-An-Example-Git-Enforced-Policy">An Example Git-Enforced Policy</a>
          </li>
          <li>
            8.5
            <a href="https://git-scm.com/book/en/v2/Customizing-Git-Summary">Summary</a>
          </li>
    </ol>
  </li>
  <li class="chapter">
  <h2>9. <a href="https://git-scm.com/book/en/v2/Git-and-Other-Systems-Git-as-a-Client">Git and Other Systems</a></h2>
    <ol>
          <li>
            9.1
            <a href="https://git-scm.com/book/en/v2/Git-and-Other-Systems-Git-as-a-Client">Git as a Client</a>
          </li>
          <li>
            9.2
            <a href="https://git-scm.com/book/en/v2/Git-and-Other-Systems-Migrating-to-Git">Migrating to Git</a>
          </li>
          <li>
            9.3
            <a href="https://git-scm.com/book/en/v2/Git-and-Other-Systems-Summary">Summary</a>
          </li>
    </ol>
  </li>
  <li class="chapter">
  <h2>10. <a href="https://git-scm.com/book/en/v2/Git-Internals-Plumbing-and-Porcelain">Git Internals</a></h2>
    <ol>
          <li>
            10.1
            <a href="https://git-scm.com/book/en/v2/Git-Internals-Plumbing-and-Porcelain">Plumbing and Porcelain</a>
          </li>
          <li>
            10.2
            <a href="https://git-scm.com/book/en/v2/Git-Internals-Git-Objects">Git Objects</a>
          </li>
          <li>
            10.3
            <a href="https://git-scm.com/book/en/v2/Git-Internals-Git-References">Git References</a>
          </li>
          <li>
            10.4
            <a href="https://git-scm.com/book/en/v2/Git-Internals-Packfiles">Packfiles</a>
          </li>
          <li>
            10.5
            <a href="https://git-scm.com/book/en/v2/Git-Internals-The-Refspec">The Refspec</a>
          </li>
          <li>
            10.6
            <a href="https://git-scm.com/book/en/v2/Git-Internals-Transfer-Protocols">Transfer Protocols</a>
          </li>
          <li>
            10.7
            <a href="https://git-scm.com/book/en/v2/Git-Internals-Maintenance-and-Data-Recovery">Maintenance and Data Recovery</a>
          </li>
          <li>
            10.8
            <a href="https://git-scm.com/book/en/v2/Git-Internals-Environment-Variables">Environment Variables</a>
          </li>
          <li>
            10.9
            <a href="https://git-scm.com/book/en/v2/Git-Internals-Summary">Summary</a>
          </li>
    </ol>
  </li>
</ol>

    </div>
    <div class="column-right">
      <ol class="book-toc">
  <li class="chapter">
  <h2>A1. <a href="https://git-scm.com/book/en/v2/Git-in-Other-Environments-Graphical-Interfaces">Git in Other Environments</a></h2>
    <ol>
          <li>
            A1.1
            <a href="https://git-scm.com/book/en/v2/Git-in-Other-Environments-Graphical-Interfaces">Graphical Interfaces</a>
          </li>
          <li>
            A1.2
            <a href="https://git-scm.com/book/en/v2/Git-in-Other-Environments-Git-in-Visual-Studio">Git in Visual Studio</a>
          </li>
          <li>
            A1.3
            <a href="https://git-scm.com/book/en/v2/Git-in-Other-Environments-Git-in-Eclipse">Git in Eclipse</a>
          </li>
          <li>
            A1.4
            <a href="https://git-scm.com/book/en/v2/Git-in-Other-Environments-Git-in-Bash">Git in Bash</a>
          </li>
          <li>
            A1.5
            <a href="https://git-scm.com/book/en/v2/Git-in-Other-Environments-Git-in-Zsh">Git in Zsh</a>
          </li>
          <li>
            A1.6
            <a href="https://git-scm.com/book/en/v2/Git-in-Other-Environments-Git-in-Powershell">Git in Powershell</a>
          </li>
          <li>
            A1.7
            <a href="https://git-scm.com/book/en/v2/Git-in-Other-Environments-Summary">Summary</a>
          </li>
    </ol>
  </li>
  <li class="chapter">
  <h2>A2. <a href="https://git-scm.com/book/en/v2/Embedding-Git-in-your-Applications-Command-line-Git">Embedding Git in your Applications</a></h2>
    <ol>
          <li>
            A2.1
            <a href="https://git-scm.com/book/en/v2/Embedding-Git-in-your-Applications-Command-line-Git">Command-line Git</a>
          </li>
          <li>
            A2.2
            <a href="https://git-scm.com/book/en/v2/Embedding-Git-in-your-Applications-Libgit2">Libgit2</a>
          </li>
          <li>
            A2.3
            <a href="https://git-scm.com/book/en/v2/Embedding-Git-in-your-Applications-JGit">JGit</a>
          </li>
    </ol>
  </li>
  <li class="chapter">
  <h2>A3. <a href="https://git-scm.com/book/en/v2/Git-Commands-Setup-and-Config">Git Commands</a></h2>
    <ol>
          <li>
            A3.1
            <a href="https://git-scm.com/book/en/v2/Git-Commands-Setup-and-Config">Setup and Config</a>
          </li>
          <li>
            A3.2
            <a href="https://git-scm.com/book/en/v2/Git-Commands-Getting-and-Creating-Projects">Getting and Creating Projects</a>
          </li>
          <li>
            A3.3
            <a href="https://git-scm.com/book/en/v2/Git-Commands-Basic-Snapshotting">Basic Snapshotting</a>
          </li>
          <li>
            A3.4
            <a href="https://git-scm.com/book/en/v2/Git-Commands-Branching-and-Merging">Branching and Merging</a>
          </li>
          <li>
            A3.5
            <a href="https://git-scm.com/book/en/v2/Git-Commands-Sharing-and-Updating-Projects">Sharing and Updating Projects</a>
          </li>
          <li>
            A3.6
            <a href="https://git-scm.com/book/en/v2/Git-Commands-Inspection-and-Comparison">Inspection and Comparison</a>
          </li>
          <li>
            A3.7
            <a href="https://git-scm.com/book/en/v2/Git-Commands-Debugging">Debugging</a>
          </li>
          <li>
            A3.8
            <a href="https://git-scm.com/book/en/v2/Git-Commands-Patching">Patching</a>
          </li>
          <li>
            A3.9
            <a href="https://git-scm.com/book/en/v2/Git-Commands-Email">Email</a>
          </li>
          <li>
            A3.10
            <a href="https://git-scm.com/book/en/v2/Git-Commands-External-Systems">External Systems</a>
          </li>
          <li>
            A3.11
            <a href="https://git-scm.com/book/en/v2/Git-Commands-Administration">Administration</a>
          </li>
          <li>
            A3.12
            <a href="https://git-scm.com/book/en/v2/Git-Commands-Plumbing-Commands">Plumbing Commands</a>
          </li>
    </ol>
  </li>
</ol>

    </div>
  </div>
 </div>

    <span class="light" id="edition">
      2nd Edition
    </span>
</div>

<div id="main" class="book edition2">
    <h1>2.2 Git Basics - Recording Changes to the Repository</h1>
  <div><a id="recording-changes-to-the-repository-a6tesP"></a>
<h2>Recording Changes to the Repository</h2>

<p>You have a bona fide Git repository and a checkout or working copy of
 the files for that project.
You need to make some changes and commit snapshots of those changes into
 your repository each time the project reaches a state you want to 
record.</p>

<p>Remember that each file in your working directory can be in one of 
two states: tracked or untracked.
Tracked files are files that were in the last snapshot; they can be 
unmodified, modified, or staged.
Untracked files are everything else – any files in your working 
directory that were not in your last snapshot and are not in your 
staging area.
When you first clone a repository, all of your files will be tracked and
 unmodified because Git just checked them out and you haven’t edited 
anything.</p>

<p>As you edit files, Git sees them as modified, because you’ve changed them since your last commit.
You stage these modified files and then commit all your staged changes, and the cycle repeats.</p>

<figure id="id-g8IeuAs8">
<img src="Git%20-%20Recording%20Changes%20to%20the%20Repository-Dateien/lifecycle.png" alt="The lifecycle of the status of your files.">
<figcaption><span class="label">Figure 2-1. </span>The lifecycle of the status of your files.</figcaption>
</figure>








<section data-type="sect2" id="_checking_status">
<h3 id="Checking-the-Status-of-Your-Files"><a href="#Checking-the-Status-of-Your-Files">Checking the Status of Your Files</a></h3>

<p>The main tool you use to determine which files are in which state is the <code>git status</code> command.<a data-type="indexterm" data-primary="git commands" data-secondary="status" id="id-xocRhMh2Tvsv"></a>
If you run this command directly after a clone, you should see something like this:</p>

<pre data-type="programlisting" data-code-language="console"><code class="gp">$</code> git status
<code class="go">On branch master</code>
<code class="go">Your branch is up-to-date with 'origin/master'.</code>
<code class="go">nothing to commit, working directory clean</code></pre>

<p>This means you have a clean working directory – in other words, there
 are no tracked and modified files.
Git also doesn’t see any untracked files, or they would be listed here.
Finally, the command tells you which branch you’re on and informs you 
that it has not diverged from the same branch on the server.
For now, that branch is always “master”, which is the default; you won’t
 worry about it here.
<a data-type="xref" href="https://git-scm.com/book/en/v2/ch00/_git_branching">Git Branching</a> will go over branches and references in detail.</p>

<p>Let’s say you add a new file to your project, a simple README file.
If the file didn’t exist before, and you run <code>git status</code>, you see your untracked file like so:</p>

<pre data-type="programlisting" data-code-language="console"><code class="gp">$</code> <code class="nb">echo</code> <code class="s1">'My Project'</code> <code class="p">&gt;</code> README
<code class="gp">$</code> git status
<code class="go">On branch master</code>
<code class="go">Your branch is up-to-date with 'origin/master'.</code>
<code class="go">Untracked files:</code>
<code class="go">  (use "git add &lt;file&gt;..." to include in what will be committed)</code>

<code class="go">    README</code>

<code class="go">nothing added to commit but untracked files present (use "git add" to track)</code></pre>

<p>You can see that your new README file is untracked, because it’s 
under the “Untracked files” heading in your status output.
Untracked basically means that Git sees a file you didn’t have in the 
previous snapshot (commit); Git won’t start including it in your commit 
snapshots until you explicitly tell it to do so.
It does this so you don’t accidentally begin including generated binary 
files or other files that you did not mean to include.
You do want to start including README, so let’s start tracking the file.</p>
</section>













<section data-type="sect2" id="_tracking_files">
<h3 id="Tracking-New-Files"><a href="#Tracking-New-Files">Tracking New Files</a></h3>

<p>In order to begin tracking a new file, you use the command <code>git add</code>.<a data-type="indexterm" data-primary="git commands" data-secondary="add" id="id-A0cVhEhlHgsJ"></a>
To begin tracking the README file, you can run this:</p>

<pre data-type="programlisting" data-code-language="console"><code class="gp">$</code> git add README</pre>

<p>If you run your status command again, you can see that your README file is now tracked and staged to be committed:</p>

<pre data-type="programlisting" data-code-language="console"><code class="gp">$</code> git status
<code class="go">On branch master</code>
<code class="go">Your branch is up-to-date with 'origin/master'.</code>
<code class="go">Changes to be committed:</code>
<code class="go">  (use "git reset HEAD &lt;file&gt;..." to unstage)</code>

<code class="go">    new file:   README</code></pre>

<p>You can tell that it’s staged because it’s under the “Changes to be committed” heading.
If you commit at this point, the version of the file at the time you ran <code>git add</code> is what will be in the historical snapshot.
You may recall that when you ran <code>git init</code> earlier, you then ran <code>git add (files)</code> – that was to begin tracking files in your directory.<a data-type="indexterm" data-primary="git commands" data-secondary="init" id="id-67ckslTEHbsx"></a><a data-type="indexterm" data-primary="git commands" data-secondary="add" id="id-oQcquKTdH9s0"></a>
The <code>git add</code> command takes a path name for either a file or a
 directory; if it’s a directory, the command adds all the files in that 
directory recursively.</p>
</section>













<section data-type="sect2" id="staging-modified-files-l4tbIosG">
<h3 id="Staging-Modified-Files"><a href="#Staging-Modified-Files">Staging Modified Files</a></h3>

<p>Let’s change a file that was already tracked.
If you change a previously tracked file called <code>CONTRIBUTING.md</code> and then run your <code>git status</code> command again, you get something that looks like this:</p>

<pre data-type="programlisting" data-code-language="console"><code class="gp">$</code> git status
<code class="go">On branch master</code>
<code class="go">Your branch is up-to-date with 'origin/master'.</code>
<code class="go">Changes to be committed:</code>
<code class="go">  (use "git reset HEAD &lt;file&gt;..." to unstage)</code>

<code class="go">    new file:   README</code>

<code class="go">Changes not staged for commit:</code>
<code class="go">  (use "git add &lt;file&gt;..." to update what will be committed)</code>
<code class="go">  (use "git checkout -- &lt;file&gt;..." to discard changes in working directory)</code>

<code class="go">    modified:   CONTRIBUTING.md</code></pre>

<p>The <code>CONTRIBUTING.md</code> file appears under a section named 
“Changes not staged for commit” – which means that a file that is 
tracked has been modified in the working directory but not yet staged.
To stage it, you run the <code>git add</code> command.
<code>git add</code> is a multipurpose command – you use it to begin 
tracking new files, to stage files, and to do other things like marking 
merge-conflicted files as resolved.
It may be helpful to think of it more as “add this content to the next 
commit” rather than “add this file to the project”.<a data-type="indexterm" data-primary="git commands" data-secondary="add" id="id-B1cnsysPIBs1"></a>
Let’s run <code>git add</code> now to stage the <code>CONTRIBUTING.md</code> file, and then run <code>git status</code> again:</p>

<pre data-type="programlisting" data-code-language="console"><code class="gp">$</code> git add CONTRIBUTING.md
<code class="gp">$</code> git status
<code class="go">On branch master</code>
<code class="go">Your branch is up-to-date with 'origin/master'.</code>
<code class="go">Changes to be committed:</code>
<code class="go">  (use "git reset HEAD &lt;file&gt;..." to unstage)</code>

<code class="go">    new file:   README</code>
<code class="go">    modified:   CONTRIBUTING.md</code></pre>

<p>Both files are staged and will go into your next commit.
At this point, suppose you remember one little change that you want to make in <code>CONTRIBUTING.md</code> before you commit it.
You open it again and make that change, and you’re ready to commit.
However, let’s run <code>git status</code> one more time:</p>

<pre data-type="programlisting" data-code-language="console"><code class="gp">$</code> vim CONTRIBUTING.md
<code class="gp">$</code> git status
<code class="go">On branch master</code>
<code class="go">Your branch is up-to-date with 'origin/master'.</code>
<code class="go">Changes to be committed:</code>
<code class="go">  (use "git reset HEAD &lt;file&gt;..." to unstage)</code>

<code class="go">    new file:   README</code>
<code class="go">    modified:   CONTRIBUTING.md</code>

<code class="go">Changes not staged for commit:</code>
<code class="go">  (use "git add &lt;file&gt;..." to update what will be committed)</code>
<code class="go">  (use "git checkout -- &lt;file&gt;..." to discard changes in working directory)</code>

<code class="go">    modified:   CONTRIBUTING.md</code></pre>

<p>What the heck?
Now <code>CONTRIBUTING.md</code> is listed as both staged <em>and</em> unstaged.
How is that possible?
It turns out that Git stages a file exactly as it is when you run the <code>git add</code> command.
If you commit now, the version of <code>CONTRIBUTING.md</code> as it was when you last ran the <code>git add</code> command is how it will go into the commit, not the version of the file as it looks in your working directory when you run <code>git commit</code>.
If you modify a file after you run <code>git add</code>, you have to run <code>git add</code> again to stage the latest version of the file:</p>

<pre data-type="programlisting" data-code-language="console"><code class="gp">$</code> git add CONTRIBUTING.md
<code class="gp">$</code> git status
<code class="go">On branch master</code>
<code class="go">Your branch is up-to-date with 'origin/master'.</code>
<code class="go">Changes to be committed:</code>
<code class="go">  (use "git reset HEAD &lt;file&gt;..." to unstage)</code>

<code class="go">    new file:   README</code>
<code class="go">    modified:   CONTRIBUTING.md</code></pre>
</section>













<section data-type="sect2" id="short-status-7mt0fys1">
<h3 id="Short-Status"><a href="#Short-Status">Short Status</a></h3>

<p>While the <code>git status</code> output is pretty comprehensive, it’s also quite wordy.
Git also has a short status flag so you can see your changes in a more compact way.
If you run <code>git status -s</code> or <code>git status --short</code> you get a far more simplified output from the command:</p>

<pre data-type="programlisting" data-code-language="console"><code class="gp">$</code> git status -s
<code class="go"> M README</code>
<code class="go">MM Rakefile</code>
<code class="go">A  lib/git.rb</code>
<code class="go">M  lib/simplegit.rb</code>
<code class="go">?? LICENSE.txt</code></pre>

<p>New files that aren’t tracked have a <code>??</code> next to them, new files that have been added to the staging area have an <code>A</code>, modified files have an <code>M</code>
 and so on.
There are two columns to the output - the left-hand column indicates the
 status of the staging area and the right-hand column indicates the 
status of the working tree.
So for example in that output, the <code>README</code> file is modified in the working directory but not yet staged, while the <code>lib/simplegit.rb</code> file is modified and staged.
The <code>Rakefile</code> was modified, staged and then modified again, so there are changes to it that are both staged and unstaged.</p>
</section>













<section data-type="sect2" id="_ignoring">
<h3 id="Ignoring-Files"><a href="#Ignoring-Files">Ignoring Files</a></h3>

<p>Often, you’ll have a class of files that you don’t want Git to automatically add or even show you as being untracked.
These are generally automatically generated files such as log files or files produced by your build system.
In such cases, you can create a file listing patterns to match them named <code>.gitignore</code>.<a data-type="indexterm" data-primary="ignoring files" id="id-pxcqhRhwUbsw"></a>
Here is an example <code>.gitignore</code> file:</p>

<pre data-type="programlisting" data-code-language="console"><code class="gp">$</code> cat .gitignore
<code class="go">*.[oa]</code>
<code class="go">*~</code></pre>

<p>The first line tells Git to ignore any files ending in “.o” or “.a” –
 object and archive files that may be the product of building your code.
The second line tells Git to ignore all files whose names end with a 
tilde (<code>~</code>), which is used by many text editors such as Emacs to mark temporary files.
You may also include a log, tmp, or pid directory; automatically generated documentation; and so on.
Setting up a <code>.gitignore</code> file before you get going is 
generally a good idea so you don’t accidentally commit files that you 
really don’t want in your Git repository.</p>

<p>The rules for the patterns you can put in the <code>.gitignore</code> file are as follows:</p>

<ul>
<li>
<p>Blank lines or lines starting with <code>#</code> are ignored.</p>
</li>
<li>
<p>Standard glob patterns work.</p>
</li>
<li>
<p>You can start patterns with a forward slash (<code>/</code>) to avoid recursivity.</p>
</li>
<li>
<p>You can end patterns with a forward slash (<code>/</code>) to specify a directory.</p>
</li>
<li>
<p>You can negate a pattern by starting it with an exclamation point (<code>!</code>).</p>
</li>
</ul>

<p>Glob patterns are like simplified regular expressions that shells use.
An asterisk (<code>*</code>) matches zero or more characters; <code>[abc]</code> matches any character inside the brackets (in this case a, b, or c); a question mark (<code>?</code>) matches a single character; and brackets enclosing characters separated by a hyphen (<code>[0-9]</code>) matches any character between them (in this case 0 through 9).
You can also use two asterisks to match nested directories; <code>a/**/z</code> would match <code>a/z</code>, <code>a/b/z</code>, <code>a/b/c/z</code>, and so on.</p>

<p>Here is another example .gitignore file:</p>

<pre data-type="programlisting"># no .a files
*.a

# but do track lib.a, even though you're ignoring .a files above
!lib.a

# only ignore the TODO file in the current directory, not subdir/TODO
/TODO

# ignore all files in the build/ directory
build/

# ignore doc/notes.txt, but not doc/server/arch.txt
doc/*.txt

# ignore all .pdf files in the doc/ directory
doc/**/*.pdf</pre>
<div data-type="tip" id="id-aMUrUEUysz">
<h6>Tip</h6>
<p>GitHub maintains a fairly comprehensive list of good <code>.gitignore</code> file examples for dozens of projects and languages at <a href="https://github.com/github/gitignore"><em class="hyperlink">https://github.com/github/gitignore</em></a> if you want a starting point for your project.</p>
</div>
</section>













<section data-type="sect2" id="_git_diff_staged">
<h3 id="Viewing-Your-Staged-and-Unstaged-Changes"><a href="#Viewing-Your-Staged-and-Unstaged-Changes">Viewing Your Staged and Unstaged Changes</a></h3>

<p>If the <code>git status</code> command is too vague for you – you want to know exactly what you changed, not just which files were changed – you can use the <code>git diff</code> command.<a data-type="indexterm" data-primary="git commands" data-secondary="diff" id="id-B1caiBhdcBs1"></a>
We’ll cover <code>git diff</code> in more detail later, but you’ll 
probably use it most often to answer these two questions: What have you 
changed but not yet staged?
And what have you staged that you are about to commit?
Although <code>git status</code> answers those questions very generally by listing the file names, <code>git diff</code> shows you the exact lines added and removed – the patch, as it were.</p>

<p>Let’s say you edit and stage the <code>README</code> file again and then edit the <code>CONTRIBUTING.md</code> file without staging it.
If you run your <code>git status</code> command, you once again see something like this:</p>

<pre data-type="programlisting" data-code-language="console"><code class="gp">$</code> git status
<code class="go">On branch master</code>
<code class="go">Your branch is up-to-date with 'origin/master'.</code>
<code class="go">Changes to be committed:</code>
<code class="go">  (use "git reset HEAD &lt;file&gt;..." to unstage)</code>

<code class="go">    modified:   README</code>

<code class="go">Changes not staged for commit:</code>
<code class="go">  (use "git add &lt;file&gt;..." to update what will be committed)</code>
<code class="go">  (use "git checkout -- &lt;file&gt;..." to discard changes in working directory)</code>

<code class="go">    modified:   CONTRIBUTING.md</code></pre>

<p>To see what you’ve changed but not yet staged, type <code>git diff</code> with no other arguments:</p>

<pre data-type="programlisting" data-code-language="console"><code class="gp">$</code> git diff
<code class="go">diff --git a/CONTRIBUTING.md b/CONTRIBUTING.md</code>
<code class="go">index 8ebb991..643e24f 100644</code>
<code class="go">--- a/CONTRIBUTING.md</code>
<code class="go">+++ b/CONTRIBUTING.md</code>
<code class="go">@@ -65,7 +65,8 @@ branch directly, things can get messy.</code>
<code class="go"> Please include a nice description of your changes when you submit your PR;</code>
<code class="go"> if we have to read the whole diff to figure out why you're contributing</code>
<code class="go"> in the first place, you're less likely to get feedback and have your change</code>
<code class="go">-merged in.</code>
<code class="go">+merged in. Also, split your changes into comprehensive chunks if your patch is</code>
<code class="go">+longer than a dozen lines.</code>

<code class="go"> If you are starting to work on a particular area, feel free to submit a PR</code>
<code class="go"> that highlights your work in progress (and note in the PR title that it's</code></pre>

<p>That command compares what is in your working directory with what is in your staging area.
The result tells you the changes you’ve made that you haven’t yet staged.</p>

<p>If you want to see what you’ve staged that will go into your next commit, you can use <code>git diff --staged</code>.
This command compares your staged changes to your last commit:</p>

<pre data-type="programlisting" data-code-language="console"><code class="gp">$</code> git diff --staged
<code class="go">diff --git a/README b/README</code>
<code class="go">new file mode 100644</code>
<code class="go">index 0000000..03902a1</code>
<code class="go">--- /dev/null</code>
<code class="go">+++ b/README</code>
<code class="go">@@ -0,0 +1 @@</code>
<code class="go">+My Project</code></pre>

<p>It’s important to note that <code>git diff</code> by itself doesn’t show all changes made since your last commit – only changes that are still unstaged.
This can be confusing, because if you’ve staged all of your changes, <code>git diff</code> will give you no output.</p>

<p>For another example, if you stage the <code>CONTRIBUTING.md</code> file and then edit it, you can use <code>git diff</code> to see the changes in the file that are staged and the changes that are unstaged.
If our environment looks like this:</p>

<pre data-type="programlisting" data-code-language="console"><code class="gp">$</code> git add CONTRIBUTING.md
<code class="gp">$</code> <code class="nb">echo</code> <code class="s1">'# test line'</code> <code class="p">&gt;&gt;</code> CONTRIBUTING.md
<code class="gp">$</code> git status
<code class="go">On branch master</code>
<code class="go">Your branch is up-to-date with 'origin/master'.</code>
<code class="go">Changes to be committed:</code>
<code class="go">  (use "git reset HEAD &lt;file&gt;..." to unstage)</code>

<code class="go">    modified:   CONTRIBUTING.md</code>

<code class="go">Changes not staged for commit:</code>
<code class="go">  (use "git add &lt;file&gt;..." to update what will be committed)</code>
<code class="go">  (use "git checkout -- &lt;file&gt;..." to discard changes in working directory)</code>

<code class="go">    modified:   CONTRIBUTING.md</code></pre>

<p>Now you can use <code>git diff</code> to see what is still unstaged:</p>

<pre data-type="programlisting" data-code-language="console"><code class="gp">$</code> git diff
<code class="go">diff --git a/CONTRIBUTING.md b/CONTRIBUTING.md</code>
<code class="go">index 643e24f..87f08c8 100644</code>
<code class="go">--- a/CONTRIBUTING.md</code>
<code class="go">+++ b/CONTRIBUTING.md</code>
<code class="go">@@ -119,3 +119,4 @@ at the</code>
<code class="go"> ## Starter Projects</code>

<code class="go"> See our [projects list](https://github.com/libgit2/libgit2/blob/development/PROJECTS.md).</code>
<code class="go">+# test line</code></pre>

<p>and <code>git diff --cached</code> to see what you’ve staged so far (<code>--staged</code> and <code>--cached</code> are synonyms):</p>

<pre data-type="programlisting" data-code-language="console"><code class="gp">$</code> git diff --cached
<code class="go">diff --git a/CONTRIBUTING.md b/CONTRIBUTING.md</code>
<code class="go">index 8ebb991..643e24f 100644</code>
<code class="go">--- a/CONTRIBUTING.md</code>
<code class="go">+++ b/CONTRIBUTING.md</code>
<code class="go">@@ -65,7 +65,8 @@ branch directly, things can get messy.</code>
<code class="go"> Please include a nice description of your changes when you submit your PR;</code>
<code class="go"> if we have to read the whole diff to figure out why you're contributing</code>
<code class="go"> in the first place, you're less likely to get feedback and have your change</code>
<code class="go">-merged in.</code>
<code class="go">+merged in. Also, split your changes into comprehensive chunks if your patch is</code>
<code class="go">+longer than a dozen lines.</code>

<code class="go"> If you are starting to work on a particular area, feel free to submit a PR</code>
<code class="go"> that highlights your work in progress (and note in the PR title that it's</code></pre>
<div data-type="note" id="git-diff-in-an-external-tool-7yUGiEclsY">
<h6>Note</h6>
<h2>Git Diff in an External Tool</h2>
<p>We will continue to use the <code>git diff</code> command in various ways throughout the rest of the book.
There is another way to look at these diffs if you prefer a graphical or external diff viewing program instead.
If you run <code>git difftool</code> instead of <code>git diff</code>, you can view any of these diffs in software like emerge, vimdiff and many more (including commercial products).
Run <code>git difftool --tool-help</code> to see what is available on your system.</p>
</div>
</section>













<section data-type="sect2" id="_committing_changes">
<h3 id="Committing-Your-Changes"><a href="#Committing-Your-Changes">Committing Your Changes</a></h3>

<p>Now that your staging area is set up the way you want it, you can commit your changes.
Remember that anything that is still unstaged – any files you have created or modified that you haven’t run <code>git add</code> on since you edited them – won’t go into this commit.
They will stay as modified files on your disk.
In this case, let’s say that the last time you ran <code>git status</code>, you saw that everything was staged, so you’re ready to commit your changes.<a data-type="indexterm" data-primary="git commands" data-secondary="status" id="id-67cwiQhbtbsx"></a>
The simplest way to commit is to type <code>git commit</code>:<a data-type="indexterm" data-primary="git commands" data-secondary="commit" id="id-yyc7uGh6tVsx"></a></p>

<pre data-type="programlisting" data-code-language="console"><code class="gp">$</code> git commit</pre>

<p>Doing so launches your editor of choice.
(This is set by your shell’s <code>$EDITOR</code> environment variable – usually vim or emacs, although you can configure it with whatever you want using the <code>git config --global core.editor</code> command as you saw in <a data-type="xref" href="https://git-scm.com/book/en/v2/ch00/_getting_started">Getting Started</a>).<a data-type="indexterm" data-primary="editor" data-secondary="changing default" id="id-adces0srtask"></a><a data-type="indexterm" data-primary="git commands" data-secondary="config" id="id-NdcLuQsmtpsz"></a></p>

<p>The editor displays the following text (this example is a Vim screen):</p>

<pre data-type="programlisting"># Please enter the commit message for your changes. Lines starting
# with '#' will be ignored, and an empty message aborts the commit.
# On branch master
# Your branch is up-to-date with 'origin/master'.
#
# Changes to be committed:
#	new file:   README
#	modified:   CONTRIBUTING.md
#
~
~
~
".git/COMMIT_EDITMSG" 9L, 283C</pre>

<p>You can see that the default commit message contains the latest output of the <code>git status</code>
 command commented out and one empty line on top.
You can remove these comments and type your commit message, or you can 
leave them there to help you remember what you’re committing.
(For an even more explicit reminder of what you’ve modified, you can 
pass the <code>-v</code> option to <code>git commit</code>.
Doing so also puts the diff of your change in the editor so you can see exactly what changes you’re committing.)
When you exit the editor, Git creates your commit with that commit message (with the comments and diff stripped out).</p>

<p>Alternatively, you can type your commit message inline with the <code>commit</code> command by specifying it after a <code>-m</code> flag, like this:</p>

<pre data-type="programlisting" data-code-language="console"><code class="gp">$</code> git commit -m <code class="s2">"Story 182: Fix benchmarks for speed"</code>
<code class="go">[master 463dc4f] Story 182: Fix benchmarks for speed</code>
<code class="go"> 2 files changed, 2 insertions(+)</code>
<code class="go"> create mode 100644 README</code></pre>

<p>Now you’ve created your first commit!
You can see that the commit has given you some output about itself: which branch you committed to (<code>master</code>), what SHA-1 checksum the commit has (<code>463dc4f</code>), how many files were changed, and statistics about lines added and removed in the commit.</p>

<p>Remember that the commit records the snapshot you set up in your staging area.
Anything you didn’t stage is still sitting there modified; you can do another commit to add it to your history.
Every time you perform a commit, you’re recording a snapshot of your project that you can revert to or compare to later.</p>
</section>













<section data-type="sect2" id="skipping-the-staging-area-K8tMFJsg">
<h3 id="Skipping-the-Staging-Area"><a href="#Skipping-the-Staging-Area">Skipping the Staging Area</a></h3>

<p><a data-type="indexterm" data-primary="staging area" data-secondary="skipping" id="id-B1c8SBhAFBs1"></a>
Although it can be amazingly useful for crafting commits exactly how you
 want them, the staging area is sometimes a bit more complex than you 
need in your workflow.
If you want to skip the staging area, Git provides a simple shortcut.
Adding the <code>-a</code> option to the <code>git commit</code> command makes Git automatically stage every file that is already tracked before doing the commit, letting you skip the <code>git add</code> part:</p>

<pre data-type="programlisting" data-code-language="console"><code class="gp">$</code> git status
<code class="go">On branch master</code>
<code class="go">Your branch is up-to-date with 'origin/master'.</code>
<code class="go">Changes not staged for commit:</code>
<code class="go">  (use "git add &lt;file&gt;..." to update what will be committed)</code>
<code class="go">  (use "git checkout -- &lt;file&gt;..." to discard changes in working directory)</code>

<code class="go">    modified:   CONTRIBUTING.md</code>

<code class="go">no changes added to commit (use "git add" and/or "git commit -a")</code>
<code class="gp">$</code> git commit -a -m <code class="s1">'added new benchmarks'</code>
<code class="go">[master 83e38c7] added new benchmarks</code>
<code class="go"> 1 file changed, 5 insertions(+), 0 deletions(-)</code></pre>

<p>Notice how you don’t have to run <code>git add</code> on the <code>CONTRIBUTING.md</code> file in this case before you commit.
That’s because the <code>-a</code> flag includes all changed files.
This is convenient, but be careful; sometimes this flag will cause you to include unwanted changes.</p>
</section>













<section data-type="sect2" id="_removing_files">
<h3 id="Removing-Files"><a href="#Removing-Files">Removing Files</a></h3>

<p><a data-type="indexterm" data-primary="files" data-secondary="removing" id="id-67c3SQh8Cbsx"></a>
To remove a file from Git, you have to remove it from your tracked files
 (more accurately, remove it from your staging area) and then commit.
The <code>git rm</code> command does that, and also removes the file 
from your working directory so you don’t see it as an untracked file the
 next time around.</p>

<p>If you simply remove the file from your working directory, it shows up under the “Changed but not updated” (that is, <em>unstaged</em>) area of your <code>git status</code> output:</p>

<pre data-type="programlisting" data-code-language="console"><code class="gp">$</code> rm PROJECTS.md
<code class="gp">$</code> git status
<code class="go">On branch master</code>
<code class="go">Your branch is up-to-date with 'origin/master'.</code>
<code class="go">Changes not staged for commit:</code>
<code class="go">  (use "git add/rm &lt;file&gt;..." to update what will be committed)</code>
<code class="go">  (use "git checkout -- &lt;file&gt;..." to discard changes in working directory)</code>

<code class="go">        deleted:    PROJECTS.md</code>

<code class="go">no changes added to commit (use "git add" and/or "git commit -a")</code></pre>

<p>Then, if you run <code>git rm</code>, it stages the file’s removal:</p>

<pre data-type="programlisting" data-code-language="console"><code class="gp">$</code> git rm PROJECTS.md
<code class="go">rm 'PROJECTS.md'</code>
<code class="gp">$</code> git status
<code class="go">On branch master</code>
<code class="go">Your branch is up-to-date with 'origin/master'.</code>
<code class="go">Changes to be committed:</code>
<code class="go">  (use "git reset HEAD &lt;file&gt;..." to unstage)</code>

<code class="go">    deleted:    PROJECTS.md</code></pre>

<p>The next time you commit, the file will be gone and no longer tracked.
If you modified the file and added it to the index already, you must force the removal with the <code>-f</code>
 option.
This is a safety feature to prevent accidental removal of data that 
hasn’t yet been recorded in a snapshot and that can’t be recovered from 
Git.</p>

<p>Another useful thing you may want to do is to keep the file in your working tree but remove it from your staging area.
In other words, you may want to keep the file on your hard drive but not have Git track it anymore.
This is particularly useful if you forgot to add something to your <code>.gitignore</code> file and accidentally staged it, like a large log file or a bunch of <code>.a</code> compiled files.
To do this, use the <code>--cached</code> option:</p>

<pre data-type="programlisting" data-code-language="console"><code class="gp">$</code> git rm --cached README</pre>

<p>You can pass files, directories, and file-glob patterns to the <code>git rm</code> command.
That means you can do things such as:</p>

<pre data-type="programlisting" data-code-language="console"><code class="gp">$</code> git rm log/<code class="se">\*</code>.log</pre>

<p>Note the backslash (<code>\</code>) in front of the <code>*</code>.
This is necessary because Git does its own filename expansion in addition to your shell’s filename expansion.
This command removes all files that have the <code>.log</code> extension in the <code>log/</code> directory.
Or, you can do something like this:</p>

<pre data-type="programlisting" data-code-language="console"><code class="gp">$</code> git rm <code class="se">\*</code>~</pre>

<p>This command removes all files whose names end with a <code>~</code>.</p>
</section>













<section data-type="sect2" id="_git_mv">
<h3 id="Moving-Files"><a href="#Moving-Files">Moving Files</a></h3>

<p><a data-type="indexterm" data-primary="files" data-secondary="moving" id="id-oQcmSyhKS9s0"></a>
Unlike many other VCS systems, Git doesn’t explicitly track file movement.
If you rename a file in Git, no metadata is stored in Git that tells it you renamed the file.
However, Git is pretty smart about figuring that out after the fact – we’ll deal with detecting file movement a bit later.</p>

<p>Thus it’s a bit confusing that Git has a <code>mv</code> command.
If you want to rename a file in Git, you can run something like:</p>

<pre data-type="programlisting" data-code-language="console"><code class="gp">$</code> git mv file_from file_to</pre>

<p>and it works fine.
In fact, if you run something like this and look at the status, you’ll see that Git considers it a renamed file:</p>

<pre data-type="programlisting" data-code-language="console"><code class="gp">$</code> git mv README.md README
<code class="gp">$</code> git status
<code class="go">On branch master</code>
<code class="go">Your branch is up-to-date with 'origin/master'.</code>
<code class="go">Changes to be committed:</code>
<code class="go">  (use "git reset HEAD &lt;file&gt;..." to unstage)</code>

<code class="go">    renamed:    README.md -&gt; README</code></pre>

<p>However, this is equivalent to running something like this:</p>

<pre data-type="programlisting" data-code-language="console"><code class="gp">$</code> mv README.md README
<code class="gp">$</code> git rm README.md
<code class="gp">$</code> git add README</pre>

<p>Git figures out that it’s a rename implicitly, so it doesn’t matter if you rename a file that way or with the <code>mv</code> command.
The only real difference is that <code>mv</code> is one command instead of three – it’s a convenience function.
More importantly, you can use any tool you like to rename a file, and address the add/rm later, before you commit.</p>
</section>





<div id="nav"><a href="https://git-scm.com/book/en/Git-Basics-Getting-a-Git-Repository">prev</a> | <a href="https://git-scm.com/book/en/v2/Git-Basics-Viewing-the-Commit-History">next</a></div></div>
</div>

        </div>
      </div>
      <footer>
  <div class="site-source">
    This <a href="https://github.com/git/git-scm.com/blob/master/README.md#license">open sourced</a> site is <a href="https://github.com/git/git-scm.com">hosted on GitHub.</a><br>
    Patches, suggestions and comments are welcome.
  </div>
  <div class="sfc-member">
    Git is a member of <a href="https://git-scm.com/sfc">Software Freedom Conservancy</a>
  </div>
</footer>

<script src="Git%20-%20Recording%20Changes%20to%20the%20Repository-Dateien/jquery-1.js"></script>
<script src="Git%20-%20Recording%20Changes%20to%20the%20Repository-Dateien/jquery-ui-1.js"></script>
<script src="Git%20-%20Recording%20Changes%20to%20the%20Repository-Dateien/jquery.js"></script>
<script src="Git%20-%20Recording%20Changes%20to%20the%20Repository-Dateien/session.js"></script>
<script src="Git%20-%20Recording%20Changes%20to%20the%20Repository-Dateien/site-1dedb2e04243f2cda0b571c1ade66561.js"></script>

    </div>



</body></html>